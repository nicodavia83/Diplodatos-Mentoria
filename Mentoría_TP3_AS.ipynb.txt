{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Selección de cripto activos para una cartera de inversión"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![picture](https://drive.google.com/uc?export=view&id=1ihM3JEKP-XPaoX9b5bwymu_IF4ntTlz-)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Trabajo Práctico 3 -  Aprendizaje Supervisado"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introducción\n",
    "\n",
    "Una tarea fundamental en el modelado financiero es la predicción del comportamiento de los precios en un futuro cercano. Usando la serie de precios histórica de los activos como datos de entrenamiento, deseamos predecir si el precio subirá o no, y en qué medida, es decir, nos interesa también el rendimiento.\n",
    "\n",
    "La predicción de retornos de criptoactivos es un gran desafío para la comunidad de aprendizaje automático debido a la alta volatilidad de los activos, la manipulación del mercado y la naturaleza no estacionaria de los datos, entre otras cuestiones.  \n",
    "\n",
    "En este práctico aplicaremos algunas técnicas de aprendizaje automático supervisado para predecir el movimiento de activos, a partir de los features que hemos trabajado en el práctico anterior. Exploraremos modelos simples de regresión y clasificación. Para validar los modelos procedemos a evaluar su bondad de ajuste, es decir, que \"tan bueno\" es el poder predictivo del modelo y comparar su desempeño.\n",
    "\n",
    "📌 **Conjunto de Entrenamiento y Test**\n",
    "\n",
    "Para entrenar modelos de ML y seleccionar el más adecuado, debemos particionar los datos en conjuntos de entrenamiento y test (o entrenamiento, validación y test). Si bien la práctica más habitual es seleccionar estos conjuntos al azar, esta metodología no es conveniente cuando trabajamos con series de tiempo, ya que romper la estructura de los datos significa romper la autocorrelación, que es lo que da sentido al análisis. Frente a esto, una posibilidad es realizar la división de datos a partir del procedimiento [Walk-Forward Validation](https://machinelearningmastery.com/backtest-machine-learning-models-time-series-forecasting/), otra es implementar lo que se conoce como [timeSeriesSplit](https://scikit-learn.org/stable/modules/cross_validation.html#time-series-split).\n",
    "\n",
    "¡Los invito a indagar sobre estas metodologías!\n",
    "\n",
    "\n",
    "📌 **Variables Predictoras**\n",
    "\n",
    "Los predictores son datos que consideramos relevantes para el comportamiento del mercado. En nuestro caso, trabajaremos con los indicadores técnicos calculados en el trabajo práctico anterior y algunos que sumaremos al análisis, pero estos pueden ser muy diversos, como datos de sentimiento, datos de amplitud, datos básicos, gubernamentales, etc., que nos ayudarán a hacer nuestras predicciones. \n",
    "\n",
    "\n",
    "\n",
    "📌 **Modelo Baseline**\n",
    "\n",
    "Establecer un baseline es esencial para cualquier problema de predicción. Este modelo nos brinda un punto de comparación, nos da una idea de cuan bien otros modelos rindieron en el problema en cuestión.\n",
    "\n",
    "Si la performance de un modelo no alcanza o es similiar a la del baseline, entonces debemos seguir trabajando para mejorar el modelo u optar por algún otro. Nuestro baseline debe ser fácil de implementar y naive. \n",
    "\n",
    "\n",
    "Algunas opciones simples para baseline: [link](https://medium.com/analytics-vidhya/benchmarking-methods-for-deep-learning-based-time-series-forecast-ec45f78b61e2)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 📖 ¡Actividades!\n",
    "\n",
    "En este práctico evaluaremos el potencial de modelos predictivos simples sobre algunos activos. Esta será la base para construir una canasta de activos con riesgo controlado. \n",
    "\n",
    "**Objetivo: predecir el movimiento del precio de cada activo para los próximos n días (tomaremos n=1, n=7)**\n",
    "\n",
    "## Parte 0 - Feature Engineer\n",
    "\n",
    "Los invito a explorar y agregar otras características además de las trabajadas anteriormente. Como en el práctico pasado, pueden usar la librería talib o calcularlos ustedes.\n",
    "\n",
    "- [Indicadores técnicos](https://coinmarketcap.com/alexandria/article/technical-analysis-101-the-best-technical-indicators-for-crypto-and-stocks)\n",
    "- [Indicadores técnicos en python](https://towardsdatascience.com/building-a-comprehensive-set-of-technical-indicators-in-python-for-quantitative-trading-8d98751b5fb)\n",
    "\n",
    "## Parte I - Clasificación\n",
    "\n",
    "Por ahora nos concentraremos en predecir si el precio del activo subirá o bajará (es decir, si el retorno a n días será positivo o negativo). Para ello entrenaremos algunos modelos de clasificación.\n",
    "\n",
    "- DecisionTreeClassifier\n",
    "- RandomForestClassifier\n",
    "- XGBClassifier\n",
    "\n",
    "En este caso, podemos definir nuestro target como 1 o 0:\n",
    "\n",
    "- Si el rendimiento a n días fue positivo el target tomará el valor 1.\n",
    "- Si el rendimiento a n días fue negativo o cero el target tomará el valor 0.\n",
    "\n",
    "Utilicen métricas adecuadas para la evaluación de los modelos (accuracy, recall, precision, etc) \n",
    "\n",
    "\n",
    "## Parte II - Regresión\n",
    "\n",
    "Ahora nuestro objetivo es implementar modelos sobre los activos para predecir su tasa de cambio (ya sea respecto al precio open o close). Consideren los modelos de regresión:\n",
    "\n",
    "- Desicion tree\n",
    "- Randon Forest\n",
    "- XGBoost\n",
    "\n",
    "\n",
    "Evalúen los resultados, con algunas métricas útiles, tales como Error Cuadrático Medio (RMSE) y el Error Absoluto Medio (MAE). ¿Qué pueden decir?\n",
    "\n",
    "\n",
    "### ¡Para tener en cuenta!\n",
    "\n",
    "- Para los modelos de regresión y clasificación elijan un modelo baseline.\n",
    "- Definir periodos de entrenamiento y test: utilizar librerías adecuadas para series de tiempo.\n",
    "- Dado el periodo de entrenamiento, chequeen si los datos están balaceados.  \n",
    "- Analicen la necesidad de estandarizar los datos, según los modelos empleados.\n",
    "- Ajuste de hiperparámetros de los modelos: dado que los parámetros pueden tomar valores en un amplio rango es recomendable uilizar GridSearchCV. \n",
    "\n",
    "\n",
    "\n",
    "## Opcional - Predicción usando Long short-term memory (LSTM)\n",
    "\n",
    "Las redes de este tipo son adecuadas para clasificar, procesar y hacer predicciones basadas en datos de series temporales, ya que pueden almacenar información pasada. Esto es importante en nuestro caso porque el precio anterior de una acción es crucial para predecir su precio futuro.\n",
    "\n",
    "Comparen la performance de los modelos anteriores (regresión y/o clasificación) con una red neuronal recurrente (LSTM). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fecha de entrega\n",
    "\n",
    "- __Versión preliminar: 29/7__ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Condiciones de entrega\n",
    "\n",
    "Realizar un informe en el cual se presenten los resultados y conclusiones del análisis desarrollado. El mismo debe estar pensado para un público técnico pero que desconoce los aspectos propios del problema a resolver. Dicho informe puede ser un notebook, a condición de que en el mismo se efectúe un análisis escrito suficientemente detallado de los resultados. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Resolución"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uFyAdGmulDWj"
   },
   "source": [
    "## Inicialización\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OYB3ccY9lV02"
   },
   "source": [
    "### Importar librerías"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "id": "6rLNe6yploMb"
   },
   "outputs": [],
   "source": [
    "import io\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn\n",
    "import datetime\n",
    "import time\n",
    "import os\n",
    "import talib as ta\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.model_selection import TimeSeriesSplit\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix\n",
    "from sklearn.metrics import precision_score, recall_score, f1_score\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "import xgboost as xgb\n",
    "import itertools"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PCn-Nxn0lcl5"
   },
   "source": [
    "### Cargar datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "HcRpNYKemOJ4"
   },
   "outputs": [],
   "source": [
    "pairs = [\"AAVEUSDT\", \"ADAUSDT\", \"AXSUSDT\", \"BCHUSDT\", \"BNBUSDT\", \"BTCUSDT\", \"COMPUSDT\", \"DASHUSDT\", \n",
    "          \"DOGEUSDT\", \"DOTUSDT\", \"EOSUSDT\", \"ETCUSDT\", \"ETHUSDT\", \"LINKUSDT\", \"LTCUSDT\", \"LUNAUSDT\", \"NEOUSDT\", \"XMRUSDT\", \"XRPUSDT\"]\n",
    "interesting_pairs = [\"BTCUSDT\", \"ETHUSDT\", \"ADAUSDT\"]\n",
    "\n",
    "def add_pair_to_dictionary(dictionary, pair):\n",
    "  dictionary[pair] = pd.read_csv(f\"https://raw.githubusercontent.com/joaquinvvelaco/diplo-datos-2022/main/mentoria/entregables/ayc/output/{pair}_features.csv\", index_col=0, parse_dates=True, dayfirst= True)\n",
    "\n",
    "def get_dataframes():\n",
    "  dataframes = dict()\n",
    "  \n",
    "  for pair in pairs:\n",
    "    add_pair_to_dictionary(dataframes, pair)\n",
    "    \n",
    "  return dataframes\n",
    "\n",
    "raw_dataframes = get_dataframes() # No agregar columnas en estos dataframes. La idea es mantener los dataframes originales.\n",
    "dataframes = raw_dataframes.copy() # Cualquier modificación de algún dataframe, realizarlo en estos.\n",
    "sample_dataframe = dataframes[\"BTCUSDT\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "rG-4XE-vvIhy",
    "outputId": "2067d87e-9007-45c4-e2dc-2890d9ab94e1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19\n"
     ]
    }
   ],
   "source": [
    "print(len(pairs))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-91rkqfGm3cN"
   },
   "source": [
    "## Funciones\n",
    "Definimos un conjunto de funciones comunes para todos los ejercicios."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DKxpNfZCnEjQ"
   },
   "source": [
    "### Funciones compuestas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "9AAF302mnIa8"
   },
   "outputs": [],
   "source": [
    "def do(func, *args):\n",
    "  for pair in pairs:\n",
    "    func(pair, *args)  \n",
    "\n",
    "\n",
    "def do_interesting(func, *args):\n",
    "  for pair in interesting_pairs:\n",
    "    func(pair, *args)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "VCTT7xoOt-66"
   },
   "source": [
    "### Funciones para graficar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "4gCobLQ1uArz"
   },
   "outputs": [],
   "source": [
    "def plot_multiple_temporal_serie(dataframe, variables, title, xlabel, ylabel, legends=None, together=False):\n",
    "  if(not together):\n",
    "    plt.figure(figsize=(20, 6))\n",
    "\n",
    "  for variable in variables:\n",
    "    seaborn.lineplot(x=dataframe.index, y=variable, data=dataframe)\n",
    "\n",
    "  plt.suptitle(f\"{title}\")\n",
    "  plt.xlabel(xlabel)\n",
    "  plt.ylabel(ylabel)\n",
    "\n",
    "  if(legends != None):\n",
    "    plt.legend(title='Serie', loc='upper left', labels=legends)\n",
    "\n",
    "def plot_temporal_serie(dataframe, variable, together=False, title=None, with_trendline=False, add=None):\n",
    "  if(not together):\n",
    "    plt.figure(figsize=(20, 6))\n",
    "  \n",
    "  if(title==None):\n",
    "    title = f\"Serie temporal\"\n",
    "  \n",
    "  seaborn.lineplot(x=dataframe.index, y=variable, data=dataframe).set(\n",
    "      xlabel=\"Fecha\", \n",
    "      ylabel=variable,\n",
    "      title=title\n",
    "  )\n",
    "  if(with_trendline):\n",
    "    seaborn.regplot(x=dataframe.index.map(pd.Timestamp.toordinal), y=variable, data=dataframe, ci=None)\n",
    "  \n",
    "  if(add!=None):\n",
    "    seaborn.lineplot(x=dataframe.index, y=add, data=dataframe)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parte 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Nuevas features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_bollinger_bands(pair):\n",
    "    dataframe = dataframes[pair]\n",
    "    ma_15 = dataframe['close'].transform(lambda x: x.rolling(window=15).mean())\n",
    "    sd_15 = dataframe['close'].transform(lambda x: x.rolling(window=15).std())\n",
    "    dataframe['upperband'] = ma_15 + 2*sd_15\n",
    "    dataframe['lowerband'] = ma_15 - 2*sd_15\n",
    "\n",
    "do(add_bollinger_bands)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "DatetimeIndex: 7307 entries, 2019-01-01 00:00:00 to 2022-05-05 12:00:00\n",
      "Data columns (total 18 columns):\n",
      " #   Column                Non-Null Count  Dtype  \n",
      "---  ------                --------------  -----  \n",
      " 0   open                  7307 non-null   float64\n",
      " 1   high                  7307 non-null   float64\n",
      " 2   low                   7307 non-null   float64\n",
      " 3   close                 7307 non-null   float64\n",
      " 4   volume                7307 non-null   float64\n",
      " 5   exchange_rate_open    7306 non-null   float64\n",
      " 6   exchange_rate_high    7306 non-null   float64\n",
      " 7   exchange_rate_low     7306 non-null   float64\n",
      " 8   exchange_rate_close   7306 non-null   float64\n",
      " 9   exchange_rate_volume  7306 non-null   float64\n",
      " 10  moving_average_close  7140 non-null   float64\n",
      " 11  rsi                   7293 non-null   float64\n",
      " 12  adx                   7280 non-null   float64\n",
      " 13  macd                  7274 non-null   float64\n",
      " 14  macd_signal           7274 non-null   float64\n",
      " 15  macd_hist             7274 non-null   float64\n",
      " 16  upperband             7293 non-null   float64\n",
      " 17  lowerband             7293 non-null   float64\n",
      "dtypes: float64(18)\n",
      "memory usage: 1.1 MB\n"
     ]
    }
   ],
   "source": [
    "dataframes[\"BTCUSDT\"].info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>exchange_rate_open</th>\n",
       "      <th>exchange_rate_high</th>\n",
       "      <th>exchange_rate_low</th>\n",
       "      <th>exchange_rate_close</th>\n",
       "      <th>exchange_rate_volume</th>\n",
       "      <th>moving_average_close</th>\n",
       "      <th>rsi</th>\n",
       "      <th>adx</th>\n",
       "      <th>macd</th>\n",
       "      <th>macd_signal</th>\n",
       "      <th>macd_hist</th>\n",
       "      <th>upperband</th>\n",
       "      <th>lowerband</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>open</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999831</td>\n",
       "      <td>0.999725</td>\n",
       "      <td>0.999698</td>\n",
       "      <td>0.062878</td>\n",
       "      <td>0.000364</td>\n",
       "      <td>-0.011485</td>\n",
       "      <td>-0.010507</td>\n",
       "      <td>-0.019566</td>\n",
       "      <td>-0.030899</td>\n",
       "      <td>0.982495</td>\n",
       "      <td>-0.020033</td>\n",
       "      <td>-0.047145</td>\n",
       "      <td>0.064815</td>\n",
       "      <td>0.069938</td>\n",
       "      <td>-0.003736</td>\n",
       "      <td>0.997958</td>\n",
       "      <td>0.998037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high</th>\n",
       "      <td>0.999831</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999652</td>\n",
       "      <td>0.999854</td>\n",
       "      <td>0.069246</td>\n",
       "      <td>-0.000062</td>\n",
       "      <td>-0.001538</td>\n",
       "      <td>-0.005624</td>\n",
       "      <td>-0.008622</td>\n",
       "      <td>-0.027510</td>\n",
       "      <td>0.982541</td>\n",
       "      <td>-0.017420</td>\n",
       "      <td>-0.045352</td>\n",
       "      <td>0.063890</td>\n",
       "      <td>0.068460</td>\n",
       "      <td>-0.002165</td>\n",
       "      <td>0.998078</td>\n",
       "      <td>0.997750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low</th>\n",
       "      <td>0.999725</td>\n",
       "      <td>0.999652</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999811</td>\n",
       "      <td>0.051960</td>\n",
       "      <td>0.002256</td>\n",
       "      <td>-0.004717</td>\n",
       "      <td>0.003017</td>\n",
       "      <td>-0.006961</td>\n",
       "      <td>-0.036520</td>\n",
       "      <td>0.982011</td>\n",
       "      <td>-0.014525</td>\n",
       "      <td>-0.049471</td>\n",
       "      <td>0.068120</td>\n",
       "      <td>0.071604</td>\n",
       "      <td>0.002074</td>\n",
       "      <td>0.997286</td>\n",
       "      <td>0.997876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>close</th>\n",
       "      <td>0.999698</td>\n",
       "      <td>0.999854</td>\n",
       "      <td>0.999811</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.061569</td>\n",
       "      <td>0.000306</td>\n",
       "      <td>-0.000110</td>\n",
       "      <td>0.000603</td>\n",
       "      <td>0.000338</td>\n",
       "      <td>-0.031850</td>\n",
       "      <td>0.982186</td>\n",
       "      <td>-0.013795</td>\n",
       "      <td>-0.047027</td>\n",
       "      <td>0.066348</td>\n",
       "      <td>0.070160</td>\n",
       "      <td>0.000702</td>\n",
       "      <td>0.997705</td>\n",
       "      <td>0.997771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>volume</th>\n",
       "      <td>0.062878</td>\n",
       "      <td>0.069246</td>\n",
       "      <td>0.051960</td>\n",
       "      <td>0.061569</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.050263</td>\n",
       "      <td>0.122354</td>\n",
       "      <td>-0.222693</td>\n",
       "      <td>-0.032738</td>\n",
       "      <td>0.398095</td>\n",
       "      <td>0.050111</td>\n",
       "      <td>0.007569</td>\n",
       "      <td>0.231906</td>\n",
       "      <td>-0.051749</td>\n",
       "      <td>-0.035785</td>\n",
       "      <td>-0.060365</td>\n",
       "      <td>0.080039</td>\n",
       "      <td>0.048582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exchange_rate_open</th>\n",
       "      <td>0.000364</td>\n",
       "      <td>-0.000062</td>\n",
       "      <td>0.002256</td>\n",
       "      <td>0.000306</td>\n",
       "      <td>-0.050263</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.441933</td>\n",
       "      <td>0.376946</td>\n",
       "      <td>-0.002451</td>\n",
       "      <td>-0.010617</td>\n",
       "      <td>-0.021608</td>\n",
       "      <td>0.306315</td>\n",
       "      <td>0.005442</td>\n",
       "      <td>0.097349</td>\n",
       "      <td>0.028358</td>\n",
       "      <td>0.236613</td>\n",
       "      <td>-0.016347</td>\n",
       "      <td>-0.017066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exchange_rate_high</th>\n",
       "      <td>-0.011485</td>\n",
       "      <td>-0.001538</td>\n",
       "      <td>-0.004717</td>\n",
       "      <td>-0.000110</td>\n",
       "      <td>0.122354</td>\n",
       "      <td>0.441933</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.342489</td>\n",
       "      <td>0.586094</td>\n",
       "      <td>0.380896</td>\n",
       "      <td>-0.023366</td>\n",
       "      <td>0.335614</td>\n",
       "      <td>-0.001642</td>\n",
       "      <td>0.078703</td>\n",
       "      <td>0.021493</td>\n",
       "      <td>0.195816</td>\n",
       "      <td>-0.019102</td>\n",
       "      <td>-0.018022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exchange_rate_low</th>\n",
       "      <td>-0.010507</td>\n",
       "      <td>-0.005624</td>\n",
       "      <td>0.003017</td>\n",
       "      <td>0.000603</td>\n",
       "      <td>-0.222693</td>\n",
       "      <td>0.376946</td>\n",
       "      <td>0.342489</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.574201</td>\n",
       "      <td>-0.386301</td>\n",
       "      <td>-0.018055</td>\n",
       "      <td>0.278079</td>\n",
       "      <td>0.015952</td>\n",
       "      <td>0.050293</td>\n",
       "      <td>0.005214</td>\n",
       "      <td>0.152044</td>\n",
       "      <td>-0.013860</td>\n",
       "      <td>-0.016695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exchange_rate_close</th>\n",
       "      <td>-0.019566</td>\n",
       "      <td>-0.008622</td>\n",
       "      <td>-0.006961</td>\n",
       "      <td>0.000338</td>\n",
       "      <td>-0.032738</td>\n",
       "      <td>-0.002451</td>\n",
       "      <td>0.586094</td>\n",
       "      <td>0.574201</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.011225</td>\n",
       "      <td>-0.021777</td>\n",
       "      <td>0.328307</td>\n",
       "      <td>0.006773</td>\n",
       "      <td>0.052752</td>\n",
       "      <td>0.009658</td>\n",
       "      <td>0.146247</td>\n",
       "      <td>-0.017625</td>\n",
       "      <td>-0.018460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exchange_rate_volume</th>\n",
       "      <td>-0.030899</td>\n",
       "      <td>-0.027510</td>\n",
       "      <td>-0.036520</td>\n",
       "      <td>-0.031850</td>\n",
       "      <td>0.398095</td>\n",
       "      <td>-0.010617</td>\n",
       "      <td>0.380896</td>\n",
       "      <td>-0.386301</td>\n",
       "      <td>-0.011225</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.028822</td>\n",
       "      <td>-0.001316</td>\n",
       "      <td>-0.008049</td>\n",
       "      <td>-0.003131</td>\n",
       "      <td>-0.001615</td>\n",
       "      <td>-0.005389</td>\n",
       "      <td>-0.032145</td>\n",
       "      <td>-0.029504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>moving_average_close</th>\n",
       "      <td>0.982495</td>\n",
       "      <td>0.982541</td>\n",
       "      <td>0.982011</td>\n",
       "      <td>0.982186</td>\n",
       "      <td>0.050111</td>\n",
       "      <td>-0.021608</td>\n",
       "      <td>-0.023366</td>\n",
       "      <td>-0.018055</td>\n",
       "      <td>-0.021777</td>\n",
       "      <td>-0.028822</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.109853</td>\n",
       "      <td>-0.045622</td>\n",
       "      <td>-0.072993</td>\n",
       "      <td>-0.073469</td>\n",
       "      <td>-0.012513</td>\n",
       "      <td>0.984501</td>\n",
       "      <td>0.983858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rsi</th>\n",
       "      <td>-0.020033</td>\n",
       "      <td>-0.017420</td>\n",
       "      <td>-0.014525</td>\n",
       "      <td>-0.013795</td>\n",
       "      <td>0.007569</td>\n",
       "      <td>0.306315</td>\n",
       "      <td>0.335614</td>\n",
       "      <td>0.278079</td>\n",
       "      <td>0.328307</td>\n",
       "      <td>-0.001316</td>\n",
       "      <td>-0.109853</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.034844</td>\n",
       "      <td>0.615190</td>\n",
       "      <td>0.509837</td>\n",
       "      <td>0.450912</td>\n",
       "      <td>-0.048045</td>\n",
       "      <td>-0.046590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>adx</th>\n",
       "      <td>-0.047145</td>\n",
       "      <td>-0.045352</td>\n",
       "      <td>-0.049471</td>\n",
       "      <td>-0.047027</td>\n",
       "      <td>0.231906</td>\n",
       "      <td>0.005442</td>\n",
       "      <td>-0.001642</td>\n",
       "      <td>0.015952</td>\n",
       "      <td>0.006773</td>\n",
       "      <td>-0.008049</td>\n",
       "      <td>-0.045622</td>\n",
       "      <td>0.034844</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.078767</td>\n",
       "      <td>-0.082182</td>\n",
       "      <td>-0.004342</td>\n",
       "      <td>-0.034155</td>\n",
       "      <td>-0.058071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>macd</th>\n",
       "      <td>0.064815</td>\n",
       "      <td>0.063890</td>\n",
       "      <td>0.068120</td>\n",
       "      <td>0.066348</td>\n",
       "      <td>-0.051749</td>\n",
       "      <td>0.097349</td>\n",
       "      <td>0.078703</td>\n",
       "      <td>0.050293</td>\n",
       "      <td>0.052752</td>\n",
       "      <td>-0.003131</td>\n",
       "      <td>-0.072993</td>\n",
       "      <td>0.615190</td>\n",
       "      <td>-0.078767</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.954499</td>\n",
       "      <td>0.335765</td>\n",
       "      <td>0.029742</td>\n",
       "      <td>0.038846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>macd_signal</th>\n",
       "      <td>0.069938</td>\n",
       "      <td>0.068460</td>\n",
       "      <td>0.071604</td>\n",
       "      <td>0.070160</td>\n",
       "      <td>-0.035785</td>\n",
       "      <td>0.028358</td>\n",
       "      <td>0.021493</td>\n",
       "      <td>0.005214</td>\n",
       "      <td>0.009658</td>\n",
       "      <td>-0.001615</td>\n",
       "      <td>-0.073469</td>\n",
       "      <td>0.509837</td>\n",
       "      <td>-0.082182</td>\n",
       "      <td>0.954499</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.039585</td>\n",
       "      <td>0.045995</td>\n",
       "      <td>0.054789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>macd_hist</th>\n",
       "      <td>-0.003736</td>\n",
       "      <td>-0.002165</td>\n",
       "      <td>0.002074</td>\n",
       "      <td>0.000702</td>\n",
       "      <td>-0.060365</td>\n",
       "      <td>0.236613</td>\n",
       "      <td>0.195816</td>\n",
       "      <td>0.152044</td>\n",
       "      <td>0.146247</td>\n",
       "      <td>-0.005389</td>\n",
       "      <td>-0.012513</td>\n",
       "      <td>0.450912</td>\n",
       "      <td>-0.004342</td>\n",
       "      <td>0.335765</td>\n",
       "      <td>0.039585</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.045627</td>\n",
       "      <td>-0.042899</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>upperband</th>\n",
       "      <td>0.997958</td>\n",
       "      <td>0.998078</td>\n",
       "      <td>0.997286</td>\n",
       "      <td>0.997705</td>\n",
       "      <td>0.080039</td>\n",
       "      <td>-0.016347</td>\n",
       "      <td>-0.019102</td>\n",
       "      <td>-0.013860</td>\n",
       "      <td>-0.017625</td>\n",
       "      <td>-0.032145</td>\n",
       "      <td>0.984501</td>\n",
       "      <td>-0.048045</td>\n",
       "      <td>-0.034155</td>\n",
       "      <td>0.029742</td>\n",
       "      <td>0.045995</td>\n",
       "      <td>-0.045627</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.996478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lowerband</th>\n",
       "      <td>0.998037</td>\n",
       "      <td>0.997750</td>\n",
       "      <td>0.997876</td>\n",
       "      <td>0.997771</td>\n",
       "      <td>0.048582</td>\n",
       "      <td>-0.017066</td>\n",
       "      <td>-0.018022</td>\n",
       "      <td>-0.016695</td>\n",
       "      <td>-0.018460</td>\n",
       "      <td>-0.029504</td>\n",
       "      <td>0.983858</td>\n",
       "      <td>-0.046590</td>\n",
       "      <td>-0.058071</td>\n",
       "      <td>0.038846</td>\n",
       "      <td>0.054789</td>\n",
       "      <td>-0.042899</td>\n",
       "      <td>0.996478</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          open      high       low     close    volume  \\\n",
       "open                  1.000000  0.999831  0.999725  0.999698  0.062878   \n",
       "high                  0.999831  1.000000  0.999652  0.999854  0.069246   \n",
       "low                   0.999725  0.999652  1.000000  0.999811  0.051960   \n",
       "close                 0.999698  0.999854  0.999811  1.000000  0.061569   \n",
       "volume                0.062878  0.069246  0.051960  0.061569  1.000000   \n",
       "exchange_rate_open    0.000364 -0.000062  0.002256  0.000306 -0.050263   \n",
       "exchange_rate_high   -0.011485 -0.001538 -0.004717 -0.000110  0.122354   \n",
       "exchange_rate_low    -0.010507 -0.005624  0.003017  0.000603 -0.222693   \n",
       "exchange_rate_close  -0.019566 -0.008622 -0.006961  0.000338 -0.032738   \n",
       "exchange_rate_volume -0.030899 -0.027510 -0.036520 -0.031850  0.398095   \n",
       "moving_average_close  0.982495  0.982541  0.982011  0.982186  0.050111   \n",
       "rsi                  -0.020033 -0.017420 -0.014525 -0.013795  0.007569   \n",
       "adx                  -0.047145 -0.045352 -0.049471 -0.047027  0.231906   \n",
       "macd                  0.064815  0.063890  0.068120  0.066348 -0.051749   \n",
       "macd_signal           0.069938  0.068460  0.071604  0.070160 -0.035785   \n",
       "macd_hist            -0.003736 -0.002165  0.002074  0.000702 -0.060365   \n",
       "upperband             0.997958  0.998078  0.997286  0.997705  0.080039   \n",
       "lowerband             0.998037  0.997750  0.997876  0.997771  0.048582   \n",
       "\n",
       "                      exchange_rate_open  exchange_rate_high  \\\n",
       "open                            0.000364           -0.011485   \n",
       "high                           -0.000062           -0.001538   \n",
       "low                             0.002256           -0.004717   \n",
       "close                           0.000306           -0.000110   \n",
       "volume                         -0.050263            0.122354   \n",
       "exchange_rate_open              1.000000            0.441933   \n",
       "exchange_rate_high              0.441933            1.000000   \n",
       "exchange_rate_low               0.376946            0.342489   \n",
       "exchange_rate_close            -0.002451            0.586094   \n",
       "exchange_rate_volume           -0.010617            0.380896   \n",
       "moving_average_close           -0.021608           -0.023366   \n",
       "rsi                             0.306315            0.335614   \n",
       "adx                             0.005442           -0.001642   \n",
       "macd                            0.097349            0.078703   \n",
       "macd_signal                     0.028358            0.021493   \n",
       "macd_hist                       0.236613            0.195816   \n",
       "upperband                      -0.016347           -0.019102   \n",
       "lowerband                      -0.017066           -0.018022   \n",
       "\n",
       "                      exchange_rate_low  exchange_rate_close  \\\n",
       "open                          -0.010507            -0.019566   \n",
       "high                          -0.005624            -0.008622   \n",
       "low                            0.003017            -0.006961   \n",
       "close                          0.000603             0.000338   \n",
       "volume                        -0.222693            -0.032738   \n",
       "exchange_rate_open             0.376946            -0.002451   \n",
       "exchange_rate_high             0.342489             0.586094   \n",
       "exchange_rate_low              1.000000             0.574201   \n",
       "exchange_rate_close            0.574201             1.000000   \n",
       "exchange_rate_volume          -0.386301            -0.011225   \n",
       "moving_average_close          -0.018055            -0.021777   \n",
       "rsi                            0.278079             0.328307   \n",
       "adx                            0.015952             0.006773   \n",
       "macd                           0.050293             0.052752   \n",
       "macd_signal                    0.005214             0.009658   \n",
       "macd_hist                      0.152044             0.146247   \n",
       "upperband                     -0.013860            -0.017625   \n",
       "lowerband                     -0.016695            -0.018460   \n",
       "\n",
       "                      exchange_rate_volume  moving_average_close       rsi  \\\n",
       "open                             -0.030899              0.982495 -0.020033   \n",
       "high                             -0.027510              0.982541 -0.017420   \n",
       "low                              -0.036520              0.982011 -0.014525   \n",
       "close                            -0.031850              0.982186 -0.013795   \n",
       "volume                            0.398095              0.050111  0.007569   \n",
       "exchange_rate_open               -0.010617             -0.021608  0.306315   \n",
       "exchange_rate_high                0.380896             -0.023366  0.335614   \n",
       "exchange_rate_low                -0.386301             -0.018055  0.278079   \n",
       "exchange_rate_close              -0.011225             -0.021777  0.328307   \n",
       "exchange_rate_volume              1.000000             -0.028822 -0.001316   \n",
       "moving_average_close             -0.028822              1.000000 -0.109853   \n",
       "rsi                              -0.001316             -0.109853  1.000000   \n",
       "adx                              -0.008049             -0.045622  0.034844   \n",
       "macd                             -0.003131             -0.072993  0.615190   \n",
       "macd_signal                      -0.001615             -0.073469  0.509837   \n",
       "macd_hist                        -0.005389             -0.012513  0.450912   \n",
       "upperband                        -0.032145              0.984501 -0.048045   \n",
       "lowerband                        -0.029504              0.983858 -0.046590   \n",
       "\n",
       "                           adx      macd  macd_signal  macd_hist  upperband  \\\n",
       "open                 -0.047145  0.064815     0.069938  -0.003736   0.997958   \n",
       "high                 -0.045352  0.063890     0.068460  -0.002165   0.998078   \n",
       "low                  -0.049471  0.068120     0.071604   0.002074   0.997286   \n",
       "close                -0.047027  0.066348     0.070160   0.000702   0.997705   \n",
       "volume                0.231906 -0.051749    -0.035785  -0.060365   0.080039   \n",
       "exchange_rate_open    0.005442  0.097349     0.028358   0.236613  -0.016347   \n",
       "exchange_rate_high   -0.001642  0.078703     0.021493   0.195816  -0.019102   \n",
       "exchange_rate_low     0.015952  0.050293     0.005214   0.152044  -0.013860   \n",
       "exchange_rate_close   0.006773  0.052752     0.009658   0.146247  -0.017625   \n",
       "exchange_rate_volume -0.008049 -0.003131    -0.001615  -0.005389  -0.032145   \n",
       "moving_average_close -0.045622 -0.072993    -0.073469  -0.012513   0.984501   \n",
       "rsi                   0.034844  0.615190     0.509837   0.450912  -0.048045   \n",
       "adx                   1.000000 -0.078767    -0.082182  -0.004342  -0.034155   \n",
       "macd                 -0.078767  1.000000     0.954499   0.335765   0.029742   \n",
       "macd_signal          -0.082182  0.954499     1.000000   0.039585   0.045995   \n",
       "macd_hist            -0.004342  0.335765     0.039585   1.000000  -0.045627   \n",
       "upperband            -0.034155  0.029742     0.045995  -0.045627   1.000000   \n",
       "lowerband            -0.058071  0.038846     0.054789  -0.042899   0.996478   \n",
       "\n",
       "                      lowerband  \n",
       "open                   0.998037  \n",
       "high                   0.997750  \n",
       "low                    0.997876  \n",
       "close                  0.997771  \n",
       "volume                 0.048582  \n",
       "exchange_rate_open    -0.017066  \n",
       "exchange_rate_high    -0.018022  \n",
       "exchange_rate_low     -0.016695  \n",
       "exchange_rate_close   -0.018460  \n",
       "exchange_rate_volume  -0.029504  \n",
       "moving_average_close   0.983858  \n",
       "rsi                   -0.046590  \n",
       "adx                   -0.058071  \n",
       "macd                   0.038846  \n",
       "macd_signal            0.054789  \n",
       "macd_hist             -0.042899  \n",
       "upperband              0.996478  \n",
       "lowerband              1.000000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframes[\"BTCUSDT\"].corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parte 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preprocesamiento"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "DatetimeIndex: 7307 entries, 2019-01-01 00:00:00 to 2022-05-05 12:00:00\n",
      "Data columns (total 18 columns):\n",
      " #   Column                Non-Null Count  Dtype  \n",
      "---  ------                --------------  -----  \n",
      " 0   open                  7307 non-null   float64\n",
      " 1   high                  7307 non-null   float64\n",
      " 2   low                   7307 non-null   float64\n",
      " 3   close                 7307 non-null   float64\n",
      " 4   volume                7307 non-null   float64\n",
      " 5   exchange_rate_open    7306 non-null   float64\n",
      " 6   exchange_rate_high    7306 non-null   float64\n",
      " 7   exchange_rate_low     7306 non-null   float64\n",
      " 8   exchange_rate_close   7306 non-null   float64\n",
      " 9   exchange_rate_volume  7306 non-null   float64\n",
      " 10  moving_average_close  7140 non-null   float64\n",
      " 11  rsi                   7293 non-null   float64\n",
      " 12  adx                   7280 non-null   float64\n",
      " 13  macd                  7274 non-null   float64\n",
      " 14  macd_signal           7274 non-null   float64\n",
      " 15  macd_hist             7274 non-null   float64\n",
      " 16  upperband             7293 non-null   float64\n",
      " 17  lowerband             7293 non-null   float64\n",
      "dtypes: float64(18)\n",
      "memory usage: 1.1 MB\n"
     ]
    }
   ],
   "source": [
    "sample_dataframe.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nos quedamos con el último intervalo autocorrelacionado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cut_serie(pair, n):\n",
    "    dataframe = dataframes[pair]\n",
    "    dataframes[pair] = dataframe.tail(n)\n",
    "\n",
    "\n",
    "do(cut_serie, 600*3) #últimos 300 dias\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Al momento de generar las features, se agregaron valores NaN a cada dataframe. Esto se debe a que el cálculo de la mayoría de las features son móviles, por lo que no es posible calcularlos para los primeros valores de las series. A partir de esto, y considerando que en el análisis exploratorio identifiamos que no existía un comportamiento estacional en las series, decidimos \"dropear\" los primeros valores de las series. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def drop_na(pair):\n",
    "    dataframes[pair] = dataframes[pair].dropna()\n",
    "\n",
    "do(drop_na)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "DatetimeIndex: 1800 entries, 2021-07-09 08:00:00 to 2022-05-05 12:00:00\n",
      "Data columns (total 18 columns):\n",
      " #   Column                Non-Null Count  Dtype  \n",
      "---  ------                --------------  -----  \n",
      " 0   open                  1800 non-null   float64\n",
      " 1   high                  1800 non-null   float64\n",
      " 2   low                   1800 non-null   float64\n",
      " 3   close                 1800 non-null   float64\n",
      " 4   volume                1800 non-null   float64\n",
      " 5   exchange_rate_open    1800 non-null   float64\n",
      " 6   exchange_rate_high    1800 non-null   float64\n",
      " 7   exchange_rate_low     1800 non-null   float64\n",
      " 8   exchange_rate_close   1800 non-null   float64\n",
      " 9   exchange_rate_volume  1800 non-null   float64\n",
      " 10  moving_average_close  1800 non-null   float64\n",
      " 11  rsi                   1800 non-null   float64\n",
      " 12  adx                   1800 non-null   float64\n",
      " 13  macd                  1800 non-null   float64\n",
      " 14  macd_signal           1800 non-null   float64\n",
      " 15  macd_hist             1800 non-null   float64\n",
      " 16  upperband             1800 non-null   float64\n",
      " 17  lowerband             1800 non-null   float64\n",
      "dtypes: float64(18)\n",
      "memory usage: 267.2 KB\n"
     ]
    }
   ],
   "source": [
    "dataframes[\"AAVEUSDT\"].info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "date\n",
      "2022-05-04 20:00:00    39773.33\n",
      "2022-05-05 00:00:00    39549.28\n",
      "2022-05-05 04:00:00    39513.66\n",
      "2022-05-05 08:00:00    38209.00\n",
      "2022-05-05 12:00:00    38209.00\n",
      "Name: close, dtype: float64\n",
      "\n",
      "\n",
      "date\n",
      "2022-05-04 20:00:00    39549.28\n",
      "2022-05-05 00:00:00    39513.66\n",
      "2022-05-05 04:00:00    38209.00\n",
      "2022-05-05 08:00:00    38209.00\n",
      "2022-05-05 12:00:00    38209.00\n",
      "Name: close, dtype: float64\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "date\n",
       "2022-05-04 20:00:00    0\n",
       "2022-05-05 00:00:00    0\n",
       "2022-05-05 04:00:00    0\n",
       "2022-05-05 08:00:00    0\n",
       "2022-05-05 12:00:00    0\n",
       "Name: close, dtype: int32"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframe = dataframes[\"BTCUSDT\"]\n",
    "\n",
    "dataframe_offset = dataframe.shift(-1)\n",
    "\n",
    "print(dataframe.close.tail())\n",
    "print(\"\\n\")\n",
    "print(dataframe_offset.close.tail().fillna(method=\"ffill\"))\n",
    "\n",
    "\n",
    "(dataframe.close.tail()<dataframe_offset.close.tail().fillna(method=\"ffill\")).astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Agregamos la columna target `{column}_will_be_greater_{period}`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataframes_y = dict()\n",
    "\n",
    "def build_target_dataframe(pair, column, period):\n",
    "    dataframe = dataframes[pair]\n",
    "    dataframe_column_offset = dataframe[column].shift(-period).fillna(method=\"ffill\")\n",
    "    dataframe_y = pd.DataFrame()\n",
    "    dataframe_y[f\"{column}_will_be_greater_{period}\"] = (dataframe[column] < dataframe_column_offset).astype(int)\n",
    "    dataframes_y[pair] = dataframe_y\n",
    "\n",
    "    \n",
    "    \n",
    "do(build_target_dataframe, \"close\", 6)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "DatetimeIndex: 1800 entries, 2021-07-09 08:00:00 to 2022-05-05 12:00:00\n",
      "Data columns (total 1 columns):\n",
      " #   Column                   Non-Null Count  Dtype\n",
      "---  ------                   --------------  -----\n",
      " 0   close_will_be_greater_6  1800 non-null   int32\n",
      "dtypes: int32(1)\n",
      "memory usage: 21.1 KB\n"
     ]
    }
   ],
   "source": [
    "dataframes_y[\"BTCUSDT\"].info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Escalamos los dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scale(pair, dict):\n",
    "    dataframe = dataframes[pair]\n",
    "    dataframe[:] = MinMaxScaler(feature_range=(0, 1)).fit_transform(dataframe)\n",
    "\n",
    "do(scale, dataframes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>exchange_rate_open</th>\n",
       "      <th>exchange_rate_high</th>\n",
       "      <th>exchange_rate_low</th>\n",
       "      <th>exchange_rate_close</th>\n",
       "      <th>exchange_rate_volume</th>\n",
       "      <th>moving_average_close</th>\n",
       "      <th>rsi</th>\n",
       "      <th>adx</th>\n",
       "      <th>macd</th>\n",
       "      <th>macd_signal</th>\n",
       "      <th>macd_hist</th>\n",
       "      <th>upperband</th>\n",
       "      <th>lowerband</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-05-04 20:00:00</th>\n",
       "      <td>0.126651</td>\n",
       "      <td>0.134189</td>\n",
       "      <td>0.139845</td>\n",
       "      <td>0.142061</td>\n",
       "      <td>0.028679</td>\n",
       "      <td>0.535890</td>\n",
       "      <td>0.572479</td>\n",
       "      <td>0.665674</td>\n",
       "      <td>0.609512</td>\n",
       "      <td>0.027542</td>\n",
       "      <td>0.147944</td>\n",
       "      <td>0.643339</td>\n",
       "      <td>0.371503</td>\n",
       "      <td>0.507112</td>\n",
       "      <td>0.435292</td>\n",
       "      <td>0.645676</td>\n",
       "      <td>0.112296</td>\n",
       "      <td>0.093601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-05 00:00:00</th>\n",
       "      <td>0.141801</td>\n",
       "      <td>0.133314</td>\n",
       "      <td>0.143030</td>\n",
       "      <td>0.134185</td>\n",
       "      <td>0.019237</td>\n",
       "      <td>0.612473</td>\n",
       "      <td>0.493814</td>\n",
       "      <td>0.647142</td>\n",
       "      <td>0.441376</td>\n",
       "      <td>0.032661</td>\n",
       "      <td>0.146960</td>\n",
       "      <td>0.590726</td>\n",
       "      <td>0.377003</td>\n",
       "      <td>0.523078</td>\n",
       "      <td>0.452662</td>\n",
       "      <td>0.646913</td>\n",
       "      <td>0.119143</td>\n",
       "      <td>0.093391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-05 04:00:00</th>\n",
       "      <td>0.133317</td>\n",
       "      <td>0.128646</td>\n",
       "      <td>0.140800</td>\n",
       "      <td>0.133883</td>\n",
       "      <td>0.018457</td>\n",
       "      <td>0.437887</td>\n",
       "      <td>0.471069</td>\n",
       "      <td>0.621624</td>\n",
       "      <td>0.496262</td>\n",
       "      <td>0.047824</td>\n",
       "      <td>0.146019</td>\n",
       "      <td>0.588685</td>\n",
       "      <td>0.377748</td>\n",
       "      <td>0.535091</td>\n",
       "      <td>0.469266</td>\n",
       "      <td>0.640858</td>\n",
       "      <td>0.124813</td>\n",
       "      <td>0.093579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-05 08:00:00</th>\n",
       "      <td>0.133317</td>\n",
       "      <td>0.131272</td>\n",
       "      <td>0.112768</td>\n",
       "      <td>0.103290</td>\n",
       "      <td>0.088331</td>\n",
       "      <td>0.499300</td>\n",
       "      <td>0.514948</td>\n",
       "      <td>0.499910</td>\n",
       "      <td>0.272836</td>\n",
       "      <td>0.232512</td>\n",
       "      <td>0.144936</td>\n",
       "      <td>0.414800</td>\n",
       "      <td>0.343391</td>\n",
       "      <td>0.524910</td>\n",
       "      <td>0.480254</td>\n",
       "      <td>0.596460</td>\n",
       "      <td>0.125019</td>\n",
       "      <td>0.095406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-05-05 12:00:00</th>\n",
       "      <td>0.103018</td>\n",
       "      <td>0.131272</td>\n",
       "      <td>0.112768</td>\n",
       "      <td>0.103290</td>\n",
       "      <td>0.088331</td>\n",
       "      <td>0.276094</td>\n",
       "      <td>0.499051</td>\n",
       "      <td>0.632092</td>\n",
       "      <td>0.498495</td>\n",
       "      <td>0.049797</td>\n",
       "      <td>0.143682</td>\n",
       "      <td>0.414800</td>\n",
       "      <td>0.311487</td>\n",
       "      <td>0.516606</td>\n",
       "      <td>0.487173</td>\n",
       "      <td>0.564288</td>\n",
       "      <td>0.125242</td>\n",
       "      <td>0.096478</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         open      high       low     close    volume  \\\n",
       "date                                                                    \n",
       "2022-05-04 20:00:00  0.126651  0.134189  0.139845  0.142061  0.028679   \n",
       "2022-05-05 00:00:00  0.141801  0.133314  0.143030  0.134185  0.019237   \n",
       "2022-05-05 04:00:00  0.133317  0.128646  0.140800  0.133883  0.018457   \n",
       "2022-05-05 08:00:00  0.133317  0.131272  0.112768  0.103290  0.088331   \n",
       "2022-05-05 12:00:00  0.103018  0.131272  0.112768  0.103290  0.088331   \n",
       "\n",
       "                     exchange_rate_open  exchange_rate_high  \\\n",
       "date                                                          \n",
       "2022-05-04 20:00:00            0.535890            0.572479   \n",
       "2022-05-05 00:00:00            0.612473            0.493814   \n",
       "2022-05-05 04:00:00            0.437887            0.471069   \n",
       "2022-05-05 08:00:00            0.499300            0.514948   \n",
       "2022-05-05 12:00:00            0.276094            0.499051   \n",
       "\n",
       "                     exchange_rate_low  exchange_rate_close  \\\n",
       "date                                                          \n",
       "2022-05-04 20:00:00           0.665674             0.609512   \n",
       "2022-05-05 00:00:00           0.647142             0.441376   \n",
       "2022-05-05 04:00:00           0.621624             0.496262   \n",
       "2022-05-05 08:00:00           0.499910             0.272836   \n",
       "2022-05-05 12:00:00           0.632092             0.498495   \n",
       "\n",
       "                     exchange_rate_volume  moving_average_close       rsi  \\\n",
       "date                                                                        \n",
       "2022-05-04 20:00:00              0.027542              0.147944  0.643339   \n",
       "2022-05-05 00:00:00              0.032661              0.146960  0.590726   \n",
       "2022-05-05 04:00:00              0.047824              0.146019  0.588685   \n",
       "2022-05-05 08:00:00              0.232512              0.144936  0.414800   \n",
       "2022-05-05 12:00:00              0.049797              0.143682  0.414800   \n",
       "\n",
       "                          adx      macd  macd_signal  macd_hist  upperband  \\\n",
       "date                                                                         \n",
       "2022-05-04 20:00:00  0.371503  0.507112     0.435292   0.645676   0.112296   \n",
       "2022-05-05 00:00:00  0.377003  0.523078     0.452662   0.646913   0.119143   \n",
       "2022-05-05 04:00:00  0.377748  0.535091     0.469266   0.640858   0.124813   \n",
       "2022-05-05 08:00:00  0.343391  0.524910     0.480254   0.596460   0.125019   \n",
       "2022-05-05 12:00:00  0.311487  0.516606     0.487173   0.564288   0.125242   \n",
       "\n",
       "                     lowerband  \n",
       "date                            \n",
       "2022-05-04 20:00:00   0.093601  \n",
       "2022-05-05 00:00:00   0.093391  \n",
       "2022-05-05 04:00:00   0.093579  \n",
       "2022-05-05 08:00:00   0.095406  \n",
       "2022-05-05 12:00:00   0.096478  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframes[\"AAVEUSDT\"].tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Separamos en train y test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataframes_X_train_clas = dict()\n",
    "dataframes_y_train_clas = dict()\n",
    "dataframes_X_test_clas = dict()\n",
    "dataframes_y_test_clas = dict()\n",
    "\n",
    "\n",
    "def split_train_test_clas(pair):\n",
    "    tss = TimeSeriesSplit(n_splits = 20)\n",
    "    for train_index, test_index in tss.split(dataframes[pair]):\n",
    "        dataframes_X_train_clas[pair], dataframes_X_test_clas[pair] = dataframes[pair].iloc[train_index, :], dataframes[pair].iloc[test_index,:]\n",
    "        dataframes_y_train_clas[pair], dataframes_y_test_clas[pair] = dataframes_y[pair].iloc[train_index], dataframes_y[pair].iloc[test_index]\n",
    "\n",
    "do(split_train_test_clas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='date'>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1080x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_btc = dataframes_X_train_clas[\"BTCUSDT\"]\n",
    "test_btc = dataframes_X_test_clas[\"BTCUSDT\"]\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(15,15))\n",
    "\n",
    "train_btc.close.plot(ax=ax, label=\"train\", linewidth=1)\n",
    "test_btc.close.plot(ax=ax, label=\"test\", linewidth=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Clasificaciones"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "KJCF-F_YgoJG"
   },
   "source": [
    "Definimos las entidades ModelEvaluation y Model para encpasular la lógica relacionada a entrenamiento, ajuste de hiperparámetros, predicciones y evaluación de modelos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ModelEvaluation:\n",
    "    def __init__(self, X_train, y_train, X_test, y_test, model, pair):\n",
    "        self.X_train = X_train\n",
    "        self.y_train = y_train\n",
    "        self.X_test = X_test\n",
    "        self.y_test = y_test\n",
    "        self.model = model\n",
    "        self.pair = pair\n",
    "\n",
    "    def evaluate(self):\n",
    "        print(\"\\n\")\n",
    "        print(f\"Evaluación del modelo {self.model.name} en el par {self.pair}\")\n",
    "        print(\"=\"*50)\n",
    "        best_hyperparameters = self.model.get_best_hyperparameters(self.X_train, self.y_train)\n",
    "        self.model.evaluate(\n",
    "            best_hyperparameters,\n",
    "            self.X_train,\n",
    "            self.y_train,\n",
    "            self.X_test,\n",
    "            self.y_test,\n",
    "        )\n",
    "        print(\"=\"*50)\n",
    "        print(\"\\n\")\n",
    "\n",
    "    def predict(self, X):\n",
    "        return self.model.predict(X)\n",
    "\n",
    "class Model:\n",
    "    def __init__(self, name, model, hyperparameters_grid, scoring, reporting):\n",
    "        self.name = name\n",
    "        self.model = model\n",
    "        self.hyperparameters_grid = hyperparameters_grid\n",
    "        self.scoring = scoring\n",
    "        self.reporting = reporting\n",
    "\n",
    "    def predict(self, X):\n",
    "        return self.model.predict(X)\n",
    "\n",
    "    def evaluate(self, best_params, X_train, y_train, X_test, y_test):\n",
    "        pred_classes = [1, 0]\n",
    "\n",
    "        self.model.set_params(**best_params)\n",
    "\n",
    "        self.model.fit(X_train, y_train)\n",
    "\n",
    "        y_pred_test = self.model.predict(X_test)\n",
    "        y_pred_train = self.model.predict(X_train)\n",
    "\n",
    "        if(self.reporting):\n",
    "            self.report_metrics(y_train, y_pred_train, pred_classes,\n",
    "                            description=\"Conjunto de entrenamiento\")\n",
    "\n",
    "            self.report_metrics(y_test, y_pred_test, pred_classes, \n",
    "                            description=\"Conjunto de evaluación\")\n",
    "\n",
    "    def get_best_hyperparameters(self, X_train, y_train, cv=5):\n",
    "        grid_cv = GridSearchCV(\n",
    "            estimator= self.model,\n",
    "            param_grid= self.hyperparameters_grid,\n",
    "            cv=cv,\n",
    "            scoring=self.scoring,\n",
    "            n_jobs=5, \n",
    "            refit=True, \n",
    "            return_train_score=True, \n",
    "            verbose=1\n",
    "        )\n",
    "        grid_cv.fit(X_train, y_train)\n",
    "\n",
    "        return  grid_cv.best_params_\n",
    "\n",
    "    def get_best_hyperparameters(self, X_train, y_train, cv=5, print_values=False, print_results=True, print_best=True):\n",
    "        grid_cv = GridSearchCV(\n",
    "            estimator= self.model,\n",
    "            param_grid= self.hyperparameters_grid,\n",
    "            cv=cv,\n",
    "            scoring=self.scoring,\n",
    "            n_jobs=5, \n",
    "            refit=True, \n",
    "            return_train_score=True, \n",
    "            verbose=1\n",
    "        )\n",
    "\n",
    "        # Fit to the training data\n",
    "        grid_cv.fit(X_train, y_train)\n",
    "\n",
    "        best_params = grid_cv.best_params_\n",
    "\n",
    "        if print_values:\n",
    "        # Print the values used for hyperparameters\n",
    "            print(f\"\"\"\n",
    "            The values used for the hyperparameters:\n",
    "            {grid_cv.cv_results_}\n",
    "            \"\"\")\n",
    "\n",
    "        if print_best:\n",
    "        # Print best score and params\n",
    "            print(\"\\nMejor configuración:\")\n",
    "            display(pd.DataFrame([best_params]))\n",
    "            print(f\"\\n{self.scoring} (mejor configuración) %.3f\" % grid_cv.best_score_)\n",
    "\n",
    "        if print_results:\n",
    "            results = self.format_results(grid_cv.cv_results_, self.hyperparameters_grid)\n",
    "            print(\"\\nPerformance para todas las configuraciones \"\n",
    "            \"(ordernadas en forma descendiente):\")\n",
    "            display(results)\n",
    "\n",
    "        return best_params\n",
    "\n",
    "    def format_results(self, results, params):\n",
    "        results_df = pd.DataFrame(results)\n",
    "        cols = ['param_' + param for param in params.keys()] \n",
    "        cols += ['mean_test_score', 'std_test_score']\n",
    "        results_df = results_df[cols].sort_values(by='mean_test_score', \n",
    "                                                    ascending=False)\n",
    "        results_df['variance'] = results_df['std_test_score']**2\n",
    "        return results_df\n",
    "\n",
    "    def report_metrics(self, y_true, y_predicted, cm_labels, description=None):\n",
    "        if description:\n",
    "            print(description)\n",
    "\n",
    "        print(\"\\tAccuracy (exactitud):  %.2f\" % accuracy_score(y_true, y_predicted))\n",
    "        print(\"\\tPrecision (precisión):  %.2f\" % precision_score(y_true, y_predicted))\n",
    "        print(\"\\tRecall (cobertura/exhaustividad):  %.2f\" % \n",
    "                recall_score(y_true, y_predicted))\n",
    "        print(\"\\tF1:  %.2f\" % f1_score(y_true, y_predicted))\n",
    "\n",
    "        cm = confusion_matrix(y_true, y_predicted)\n",
    "        \n",
    "        self.plot_confusion_matrix(cm, cm_labels, \n",
    "                                title=f\"Confusion matrix ({description})\")          \n",
    "\n",
    "    def plot_confusion_matrix(self, cm, classes,\n",
    "                          normalize=False,\n",
    "                          title='Confusion matrix',\n",
    "                          cmap=plt.cm.Blues):\n",
    "        \"\"\"\n",
    "        This function prints and plots the confusion matrix.\n",
    "        Normalization can be applied by setting `normalize=True`.\n",
    "        \"\"\"\n",
    "        plt.figure().clear()\n",
    "        if normalize:\n",
    "            cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "\n",
    "        plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "        plt.title(title)\n",
    "        plt.colorbar()\n",
    "        tick_marks = np.arange(len(classes))\n",
    "        plt.xticks(tick_marks, classes, rotation=45)\n",
    "        plt.yticks(tick_marks, classes)\n",
    "\n",
    "        fmt = '.2f' if normalize else 'd'\n",
    "        thresh = cm.max() / 2.\n",
    "        for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "            plt.text(j, i, format(cm[i, j], fmt),\n",
    "                    horizontalalignment=\"center\",\n",
    "                    color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "\n",
    "        plt.tight_layout()\n",
    "        plt.ylabel('Etiqueta correcta')\n",
    "        plt.xlabel('Etiqueta predicha')          "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creamos un array con las instancias de cada modelo de clasificación"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "decision_tree_classifier = DecisionTreeClassifier(random_state=0)\n",
    "hiperparams_decision_tree_classifier = {\n",
    "    'criterion': ['gini', 'entropy'],\n",
    "    'splitter': ['best', 'random'],\n",
    "    'max_depth': np.arange(4, 25, 4),\n",
    "    'max_features': ['auto', 'log2', 'sqrt']\n",
    "}\n",
    "\n",
    "random_forest_classifier = RandomForestClassifier(random_state=0)\n",
    "hiperparams_random_forest_classifier = {\n",
    "    'criterion': ['gini', 'entropy'],\n",
    "    'max_depth': np.arange(4, 25, 4),\n",
    "    'n_estimators': np.arange(10, 100, 10),\n",
    "    'max_features': ['log2', 'sqrt']\n",
    "}\n",
    "\n",
    "xg_boost = xgb.XGBClassifier(random_state=0)\n",
    "hiperparams_xg_boost = {\n",
    "    \"learning_rate\": np.linspace(0.1, 0.2, 3), \n",
    "    'max_depth': np.arange(4, 25, 4),\n",
    "    'n_estimators': np.arange(10, 100, 10),\n",
    "}\n",
    "\n",
    "\n",
    "models_clas = [\n",
    "    Model(\"DecisionTreeClassifier\", decision_tree_classifier, hiperparams_decision_tree_classifier, \"accuracy\", True),\n",
    "    Model(\"RandomForestClassifier\", random_forest_classifier, hiperparams_random_forest_classifier, \"accuracy\", True),\n",
    "    Model(\"XGBClassifier\", xg_boost, hiperparams_xg_boost, \"accuracy\", True)\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "evaluation_models_clas = dict()\n",
    "\n",
    "def add_evaluation_model(pair, models, evaluation_models, x_train_dict, y_train_dict, x_test_dict, y_test_dict):\n",
    "    X_train = x_train_dict[pair]\n",
    "    y_train = y_train_dict[pair]\n",
    "    X_test = x_test_dict[pair]\n",
    "    y_test = y_test_dict[pair]\n",
    "\n",
    "    for model in models:\n",
    "        evaluation_models[f\"{pair}_{model.name}\"] = (ModelEvaluation(X_train, y_train, X_test, y_test, model, pair))\n",
    "\n",
    "do(add_evaluation_model, models_clas, evaluation_models_clas, dataframes_X_train_clas, dataframes_y_train_clas, dataframes_X_test_clas, dataframes_y_test_clas)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parte 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preprocesamiento"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Definimos la función `to_dataframe_pred` para convertir el dataframe en una estructura X-y,\n",
    "1. La matriz `X` representan un conjunto de subseries de valores consecutivos de la serie.\n",
    "2. El vector columna `y` representa el valor siguiente a la subserie. Es decir, si la subserie X[0] = [n0,n1,n2] entonces y[0]=n3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataframes_pred = dict()\n",
    "dataframes_y_pred = dict()\n",
    "\n",
    "def to_dataframe_pred(pair, target=\"close\", n_in=1, n_out=1):\n",
    "    dataframe = dataframes[pair]\n",
    "    data_tuned = pd.DataFrame(dataframe)\n",
    "    columns, names = list(), list()\n",
    "\n",
    "    for i in range(n_in, 0, -1):\n",
    "        columns.append(data_tuned.shift(i))\n",
    "        names += [f\"{column}(t-{i})\" for column in dataframe.columns]\n",
    "    \n",
    "    for i in range(0, n_out):\n",
    "        columns.append(data_tuned[target].shift(-i))\n",
    "        if i == 0:\n",
    "            names += [f'{target}(t)']\n",
    "        else:\n",
    "            names += [f'{target}(t+{i})']\n",
    "    \n",
    "    data_aggregate = pd.concat(columns, axis=1)\n",
    "    data_aggregate.columns = names\n",
    "\n",
    "    data_aggregate.dropna(inplace = True)\n",
    "    data_aggregate.index = data_aggregate.index.astype(np.int64)\n",
    "\n",
    "    dataframes_y_pred[pair] = data_aggregate.iloc[:,-1:]\n",
    "    dataframes_pred[pair] = data_aggregate.loc[:, data_aggregate.columns != f'{target}(t)']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "do(to_dataframe_pred, \"close\", 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>open(t-5)</th>\n",
       "      <th>high(t-5)</th>\n",
       "      <th>low(t-5)</th>\n",
       "      <th>close(t-5)</th>\n",
       "      <th>volume(t-5)</th>\n",
       "      <th>exchange_rate_open(t-5)</th>\n",
       "      <th>exchange_rate_high(t-5)</th>\n",
       "      <th>exchange_rate_low(t-5)</th>\n",
       "      <th>exchange_rate_close(t-5)</th>\n",
       "      <th>exchange_rate_volume(t-5)</th>\n",
       "      <th>...</th>\n",
       "      <th>exchange_rate_close(t-1)</th>\n",
       "      <th>exchange_rate_volume(t-1)</th>\n",
       "      <th>moving_average_close(t-1)</th>\n",
       "      <th>rsi(t-1)</th>\n",
       "      <th>adx(t-1)</th>\n",
       "      <th>macd(t-1)</th>\n",
       "      <th>macd_signal(t-1)</th>\n",
       "      <th>macd_hist(t-1)</th>\n",
       "      <th>upperband(t-1)</th>\n",
       "      <th>lowerband(t-1)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1625889600000000000</th>\n",
       "      <td>0.085745</td>\n",
       "      <td>0.098582</td>\n",
       "      <td>0.087540</td>\n",
       "      <td>0.102146</td>\n",
       "      <td>0.187789</td>\n",
       "      <td>0.525007</td>\n",
       "      <td>0.474618</td>\n",
       "      <td>0.653290</td>\n",
       "      <td>0.615282</td>\n",
       "      <td>0.169130</td>\n",
       "      <td>...</td>\n",
       "      <td>0.532523</td>\n",
       "      <td>0.067442</td>\n",
       "      <td>0.063429</td>\n",
       "      <td>0.511381</td>\n",
       "      <td>0.171505</td>\n",
       "      <td>0.486841</td>\n",
       "      <td>0.449786</td>\n",
       "      <td>0.698335</td>\n",
       "      <td>0.059562</td>\n",
       "      <td>0.094474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1625904000000000000</th>\n",
       "      <td>0.102148</td>\n",
       "      <td>0.098938</td>\n",
       "      <td>0.105989</td>\n",
       "      <td>0.098212</td>\n",
       "      <td>0.089788</td>\n",
       "      <td>0.615813</td>\n",
       "      <td>0.400329</td>\n",
       "      <td>0.719733</td>\n",
       "      <td>0.497936</td>\n",
       "      <td>0.036126</td>\n",
       "      <td>...</td>\n",
       "      <td>0.492820</td>\n",
       "      <td>0.070078</td>\n",
       "      <td>0.063021</td>\n",
       "      <td>0.477007</td>\n",
       "      <td>0.151772</td>\n",
       "      <td>0.491963</td>\n",
       "      <td>0.456802</td>\n",
       "      <td>0.695887</td>\n",
       "      <td>0.055802</td>\n",
       "      <td>0.096381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1625918400000000000</th>\n",
       "      <td>0.098213</td>\n",
       "      <td>0.109239</td>\n",
       "      <td>0.104540</td>\n",
       "      <td>0.113546</td>\n",
       "      <td>0.093914</td>\n",
       "      <td>0.498363</td>\n",
       "      <td>0.447375</td>\n",
       "      <td>0.644219</td>\n",
       "      <td>0.607805</td>\n",
       "      <td>0.089941</td>\n",
       "      <td>...</td>\n",
       "      <td>0.548893</td>\n",
       "      <td>0.095813</td>\n",
       "      <td>0.062654</td>\n",
       "      <td>0.512178</td>\n",
       "      <td>0.131880</td>\n",
       "      <td>0.499990</td>\n",
       "      <td>0.464262</td>\n",
       "      <td>0.699756</td>\n",
       "      <td>0.057925</td>\n",
       "      <td>0.095796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1625932800000000000</th>\n",
       "      <td>0.113548</td>\n",
       "      <td>0.113374</td>\n",
       "      <td>0.113510</td>\n",
       "      <td>0.107158</td>\n",
       "      <td>0.101284</td>\n",
       "      <td>0.608331</td>\n",
       "      <td>0.417971</td>\n",
       "      <td>0.683038</td>\n",
       "      <td>0.484470</td>\n",
       "      <td>0.092742</td>\n",
       "      <td>...</td>\n",
       "      <td>0.469012</td>\n",
       "      <td>0.147256</td>\n",
       "      <td>0.062169</td>\n",
       "      <td>0.447467</td>\n",
       "      <td>0.123640</td>\n",
       "      <td>0.499895</td>\n",
       "      <td>0.470209</td>\n",
       "      <td>0.686564</td>\n",
       "      <td>0.058707</td>\n",
       "      <td>0.096339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1625947200000000000</th>\n",
       "      <td>0.107160</td>\n",
       "      <td>0.104382</td>\n",
       "      <td>0.109020</td>\n",
       "      <td>0.109324</td>\n",
       "      <td>0.079422</td>\n",
       "      <td>0.484886</td>\n",
       "      <td>0.356801</td>\n",
       "      <td>0.633052</td>\n",
       "      <td>0.532523</td>\n",
       "      <td>0.067442</td>\n",
       "      <td>...</td>\n",
       "      <td>0.546715</td>\n",
       "      <td>0.044170</td>\n",
       "      <td>0.061760</td>\n",
       "      <td>0.481503</td>\n",
       "      <td>0.124500</td>\n",
       "      <td>0.503449</td>\n",
       "      <td>0.475784</td>\n",
       "      <td>0.683327</td>\n",
       "      <td>0.058746</td>\n",
       "      <td>0.100537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1651694400000000000</th>\n",
       "      <td>0.216232</td>\n",
       "      <td>0.219927</td>\n",
       "      <td>0.225983</td>\n",
       "      <td>0.227736</td>\n",
       "      <td>0.076972</td>\n",
       "      <td>0.549760</td>\n",
       "      <td>0.439996</td>\n",
       "      <td>0.676402</td>\n",
       "      <td>0.578034</td>\n",
       "      <td>0.126349</td>\n",
       "      <td>...</td>\n",
       "      <td>0.528310</td>\n",
       "      <td>0.022469</td>\n",
       "      <td>0.241564</td>\n",
       "      <td>0.678226</td>\n",
       "      <td>0.309560</td>\n",
       "      <td>0.550519</td>\n",
       "      <td>0.502867</td>\n",
       "      <td>0.742317</td>\n",
       "      <td>0.203170</td>\n",
       "      <td>0.237292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1651708800000000000</th>\n",
       "      <td>0.227738</td>\n",
       "      <td>0.236856</td>\n",
       "      <td>0.235361</td>\n",
       "      <td>0.242851</td>\n",
       "      <td>0.243002</td>\n",
       "      <td>0.578531</td>\n",
       "      <td>0.468851</td>\n",
       "      <td>0.680269</td>\n",
       "      <td>0.595262</td>\n",
       "      <td>0.260596</td>\n",
       "      <td>...</td>\n",
       "      <td>0.531611</td>\n",
       "      <td>0.051693</td>\n",
       "      <td>0.240849</td>\n",
       "      <td>0.690548</td>\n",
       "      <td>0.315795</td>\n",
       "      <td>0.567248</td>\n",
       "      <td>0.516592</td>\n",
       "      <td>0.754350</td>\n",
       "      <td>0.209022</td>\n",
       "      <td>0.234656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1651723200000000000</th>\n",
       "      <td>0.242852</td>\n",
       "      <td>0.238948</td>\n",
       "      <td>0.244620</td>\n",
       "      <td>0.237450</td>\n",
       "      <td>0.146301</td>\n",
       "      <td>0.595774</td>\n",
       "      <td>0.407174</td>\n",
       "      <td>0.679594</td>\n",
       "      <td>0.493903</td>\n",
       "      <td>0.046855</td>\n",
       "      <td>...</td>\n",
       "      <td>0.492639</td>\n",
       "      <td>0.048059</td>\n",
       "      <td>0.240084</td>\n",
       "      <td>0.635952</td>\n",
       "      <td>0.323213</td>\n",
       "      <td>0.575629</td>\n",
       "      <td>0.529501</td>\n",
       "      <td>0.747238</td>\n",
       "      <td>0.213115</td>\n",
       "      <td>0.235323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1651737600000000000</th>\n",
       "      <td>0.237452</td>\n",
       "      <td>0.254722</td>\n",
       "      <td>0.242847</td>\n",
       "      <td>0.258857</td>\n",
       "      <td>0.378347</td>\n",
       "      <td>0.494329</td>\n",
       "      <td>0.462815</td>\n",
       "      <td>0.643922</td>\n",
       "      <td>0.625442</td>\n",
       "      <td>0.232611</td>\n",
       "      <td>...</td>\n",
       "      <td>0.515869</td>\n",
       "      <td>0.101946</td>\n",
       "      <td>0.239306</td>\n",
       "      <td>0.627245</td>\n",
       "      <td>0.322128</td>\n",
       "      <td>0.580912</td>\n",
       "      <td>0.541044</td>\n",
       "      <td>0.735333</td>\n",
       "      <td>0.216365</td>\n",
       "      <td>0.235336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1651752000000000000</th>\n",
       "      <td>0.258859</td>\n",
       "      <td>0.260433</td>\n",
       "      <td>0.267455</td>\n",
       "      <td>0.260525</td>\n",
       "      <td>0.143018</td>\n",
       "      <td>0.625979</td>\n",
       "      <td>0.421517</td>\n",
       "      <td>0.728710</td>\n",
       "      <td>0.528310</td>\n",
       "      <td>0.022469</td>\n",
       "      <td>...</td>\n",
       "      <td>0.358216</td>\n",
       "      <td>0.359896</td>\n",
       "      <td>0.238265</td>\n",
       "      <td>0.383543</td>\n",
       "      <td>0.312142</td>\n",
       "      <td>0.559892</td>\n",
       "      <td>0.545441</td>\n",
       "      <td>0.673062</td>\n",
       "      <td>0.216476</td>\n",
       "      <td>0.234506</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1795 rows × 90 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     open(t-5)  high(t-5)  low(t-5)  close(t-5)  volume(t-5)  \\\n",
       "date                                                                           \n",
       "1625889600000000000   0.085745   0.098582  0.087540    0.102146     0.187789   \n",
       "1625904000000000000   0.102148   0.098938  0.105989    0.098212     0.089788   \n",
       "1625918400000000000   0.098213   0.109239  0.104540    0.113546     0.093914   \n",
       "1625932800000000000   0.113548   0.113374  0.113510    0.107158     0.101284   \n",
       "1625947200000000000   0.107160   0.104382  0.109020    0.109324     0.079422   \n",
       "...                        ...        ...       ...         ...          ...   \n",
       "1651694400000000000   0.216232   0.219927  0.225983    0.227736     0.076972   \n",
       "1651708800000000000   0.227738   0.236856  0.235361    0.242851     0.243002   \n",
       "1651723200000000000   0.242852   0.238948  0.244620    0.237450     0.146301   \n",
       "1651737600000000000   0.237452   0.254722  0.242847    0.258857     0.378347   \n",
       "1651752000000000000   0.258859   0.260433  0.267455    0.260525     0.143018   \n",
       "\n",
       "                     exchange_rate_open(t-5)  exchange_rate_high(t-5)  \\\n",
       "date                                                                    \n",
       "1625889600000000000                 0.525007                 0.474618   \n",
       "1625904000000000000                 0.615813                 0.400329   \n",
       "1625918400000000000                 0.498363                 0.447375   \n",
       "1625932800000000000                 0.608331                 0.417971   \n",
       "1625947200000000000                 0.484886                 0.356801   \n",
       "...                                      ...                      ...   \n",
       "1651694400000000000                 0.549760                 0.439996   \n",
       "1651708800000000000                 0.578531                 0.468851   \n",
       "1651723200000000000                 0.595774                 0.407174   \n",
       "1651737600000000000                 0.494329                 0.462815   \n",
       "1651752000000000000                 0.625979                 0.421517   \n",
       "\n",
       "                     exchange_rate_low(t-5)  exchange_rate_close(t-5)  \\\n",
       "date                                                                    \n",
       "1625889600000000000                0.653290                  0.615282   \n",
       "1625904000000000000                0.719733                  0.497936   \n",
       "1625918400000000000                0.644219                  0.607805   \n",
       "1625932800000000000                0.683038                  0.484470   \n",
       "1625947200000000000                0.633052                  0.532523   \n",
       "...                                     ...                       ...   \n",
       "1651694400000000000                0.676402                  0.578034   \n",
       "1651708800000000000                0.680269                  0.595262   \n",
       "1651723200000000000                0.679594                  0.493903   \n",
       "1651737600000000000                0.643922                  0.625442   \n",
       "1651752000000000000                0.728710                  0.528310   \n",
       "\n",
       "                     exchange_rate_volume(t-5)  ...  exchange_rate_close(t-1)  \\\n",
       "date                                            ...                             \n",
       "1625889600000000000                   0.169130  ...                  0.532523   \n",
       "1625904000000000000                   0.036126  ...                  0.492820   \n",
       "1625918400000000000                   0.089941  ...                  0.548893   \n",
       "1625932800000000000                   0.092742  ...                  0.469012   \n",
       "1625947200000000000                   0.067442  ...                  0.546715   \n",
       "...                                        ...  ...                       ...   \n",
       "1651694400000000000                   0.126349  ...                  0.528310   \n",
       "1651708800000000000                   0.260596  ...                  0.531611   \n",
       "1651723200000000000                   0.046855  ...                  0.492639   \n",
       "1651737600000000000                   0.232611  ...                  0.515869   \n",
       "1651752000000000000                   0.022469  ...                  0.358216   \n",
       "\n",
       "                     exchange_rate_volume(t-1)  moving_average_close(t-1)  \\\n",
       "date                                                                        \n",
       "1625889600000000000                   0.067442                   0.063429   \n",
       "1625904000000000000                   0.070078                   0.063021   \n",
       "1625918400000000000                   0.095813                   0.062654   \n",
       "1625932800000000000                   0.147256                   0.062169   \n",
       "1625947200000000000                   0.044170                   0.061760   \n",
       "...                                        ...                        ...   \n",
       "1651694400000000000                   0.022469                   0.241564   \n",
       "1651708800000000000                   0.051693                   0.240849   \n",
       "1651723200000000000                   0.048059                   0.240084   \n",
       "1651737600000000000                   0.101946                   0.239306   \n",
       "1651752000000000000                   0.359896                   0.238265   \n",
       "\n",
       "                     rsi(t-1)  adx(t-1)  macd(t-1)  macd_signal(t-1)  \\\n",
       "date                                                                   \n",
       "1625889600000000000  0.511381  0.171505   0.486841          0.449786   \n",
       "1625904000000000000  0.477007  0.151772   0.491963          0.456802   \n",
       "1625918400000000000  0.512178  0.131880   0.499990          0.464262   \n",
       "1625932800000000000  0.447467  0.123640   0.499895          0.470209   \n",
       "1625947200000000000  0.481503  0.124500   0.503449          0.475784   \n",
       "...                       ...       ...        ...               ...   \n",
       "1651694400000000000  0.678226  0.309560   0.550519          0.502867   \n",
       "1651708800000000000  0.690548  0.315795   0.567248          0.516592   \n",
       "1651723200000000000  0.635952  0.323213   0.575629          0.529501   \n",
       "1651737600000000000  0.627245  0.322128   0.580912          0.541044   \n",
       "1651752000000000000  0.383543  0.312142   0.559892          0.545441   \n",
       "\n",
       "                     macd_hist(t-1)  upperband(t-1)  lowerband(t-1)  \n",
       "date                                                                 \n",
       "1625889600000000000        0.698335        0.059562        0.094474  \n",
       "1625904000000000000        0.695887        0.055802        0.096381  \n",
       "1625918400000000000        0.699756        0.057925        0.095796  \n",
       "1625932800000000000        0.686564        0.058707        0.096339  \n",
       "1625947200000000000        0.683327        0.058746        0.100537  \n",
       "...                             ...             ...             ...  \n",
       "1651694400000000000        0.742317        0.203170        0.237292  \n",
       "1651708800000000000        0.754350        0.209022        0.234656  \n",
       "1651723200000000000        0.747238        0.213115        0.235323  \n",
       "1651737600000000000        0.735333        0.216365        0.235336  \n",
       "1651752000000000000        0.673062        0.216476        0.234506  \n",
       "\n",
       "[1795 rows x 90 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframes_pred[\"BTCUSDT\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>close(t)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1625889600000000000</th>\n",
       "      <td>0.104448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1625904000000000000</th>\n",
       "      <td>0.109496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1625918400000000000</th>\n",
       "      <td>0.100393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1625932800000000000</th>\n",
       "      <td>0.105035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1625947200000000000</th>\n",
       "      <td>0.101745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1651694400000000000</th>\n",
       "      <td>0.262883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1651708800000000000</th>\n",
       "      <td>0.257110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1651723200000000000</th>\n",
       "      <td>0.256192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1651737600000000000</th>\n",
       "      <td>0.222578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1651752000000000000</th>\n",
       "      <td>0.222578</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1795 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     close(t)\n",
       "date                         \n",
       "1625889600000000000  0.104448\n",
       "1625904000000000000  0.109496\n",
       "1625918400000000000  0.100393\n",
       "1625932800000000000  0.105035\n",
       "1625947200000000000  0.101745\n",
       "...                       ...\n",
       "1651694400000000000  0.262883\n",
       "1651708800000000000  0.257110\n",
       "1651723200000000000  0.256192\n",
       "1651737600000000000  0.222578\n",
       "1651752000000000000  0.222578\n",
       "\n",
       "[1795 rows x 1 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframes_y_pred[\"BTCUSDT\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Escalamos los dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "do(scale, dataframes_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Separamos en train y test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataframes_X_train_pred = dict()\n",
    "dataframes_y_train_pred = dict()\n",
    "dataframes_X_test_pred = dict()\n",
    "dataframes_y_test_pred = dict()\n",
    "\n",
    "\n",
    "def split_train_test_pred(pair):\n",
    "    tss = TimeSeriesSplit(n_splits = 20)\n",
    "    for train_index, test_index in tss.split(dataframes_pred[pair]):\n",
    "        dataframes_X_train_pred[pair], dataframes_X_test_pred[pair] = dataframes_pred[pair].iloc[train_index, :], dataframes_pred[pair].iloc[test_index,:]\n",
    "        dataframes_y_train_pred[pair], dataframes_y_test_pred[pair] = dataframes_y_pred[pair].iloc[train_index], dataframes_y_pred[pair].iloc[test_index]\n",
    "\n",
    "do(split_train_test_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='date'>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1080x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_btc_pred = dataframes_X_train_pred[\"BTCUSDT\"]\n",
    "test_btc_pred = dataframes_X_test_pred[\"BTCUSDT\"]\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(15,15))\n",
    "\n",
    "train_btc_pred[\"close(t-1)\"].plot(ax=ax, label=\"train\", linewidth=1)\n",
    "test_btc_pred[\"close(t-1)\"].plot(ax=ax, label=\"test\", linewidth=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Predicciones"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creamos un array con las instancias de cada modelo de predicción"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "decision_tree_regressor = DecisionTreeRegressor(random_state=0)\n",
    "hiperparams_decision_tree_regressor = {\n",
    "    \"splitter\":[\"best\",\"random\"],\n",
    "    \"max_depth\" : [1,3,5,7,9,11,12],\n",
    "    \"min_samples_leaf\":[1,2,3,4,5,6,7,8,9,10],\n",
    "    \"min_weight_fraction_leaf\":[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9],\n",
    "    \"max_features\":[\"auto\",\"log2\",\"sqrt\",None],\n",
    "    \"max_leaf_nodes\":[None,10,20,30,40,50,60,70,80,90] \n",
    "}\n",
    "\n",
    "xg_boost_regressor = xgb.XGBRegressor(random_state=0)\n",
    "hiperparams_xg_boost_regressor = {\n",
    "    'nthread':[4],\n",
    "    'objective':['reg:linear'],\n",
    "    'learning_rate': [.03, 0.05, .07],\n",
    "    'max_depth': [5, 6, 7],\n",
    "    'min_child_weight': [4],\n",
    "    'silent': [1],\n",
    "    'subsample': [0.7],\n",
    "    'colsample_bytree': [0.7],\n",
    "    'n_estimators': [500]\n",
    "}\n",
    "\n",
    "models_pred = [\n",
    "    Model(\"DecisionTreeRegressor\", decision_tree_regressor, hiperparams_decision_tree_regressor, \"neg_mean_squared_error\", False),\n",
    "    Model(\"XGBRegressor\", xg_boost_regressor, hiperparams_xg_boost_regressor, \"neg_mean_squared_error\", False),\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "evaluation_models_pred = dict()\n",
    "do(add_evaluation_model, models_pred, evaluation_models_pred, dataframes_X_train_pred, dataframes_y_train_pred, dataframes_X_test_pred, dataframes_y_test_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "Evaluación del modelo DecisionTreeRegressor en el par BTCUSDT\n",
      "==================================================\n",
      "Fitting 5 folds for each of 50400 candidates, totalling 252000 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\model_selection\\_validation.py:378: FitFailedWarning: \n",
      "112000 fits failed out of a total of 252000.\n",
      "The score on these train-test partitions for these parameters will be set to nan.\n",
      "If these failures are not expected, you can try to debug them by setting error_score='raise'.\n",
      "\n",
      "Below are more details about the failures:\n",
      "--------------------------------------------------------------------------------\n",
      "28000 fits failed with the following error:\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\model_selection\\_validation.py\", line 686, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\tree\\_classes.py\", line 1342, in fit\n",
      "    super().fit(\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\tree\\_classes.py\", line 286, in fit\n",
      "    check_scalar(\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\utils\\validation.py\", line 1489, in check_scalar\n",
      "    raise ValueError(\n",
      "ValueError: min_weight_fraction_leaf == 0.6, must be <= 0.5.\n",
      "\n",
      "--------------------------------------------------------------------------------\n",
      "28000 fits failed with the following error:\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\model_selection\\_validation.py\", line 686, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\tree\\_classes.py\", line 1342, in fit\n",
      "    super().fit(\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\tree\\_classes.py\", line 286, in fit\n",
      "    check_scalar(\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\utils\\validation.py\", line 1489, in check_scalar\n",
      "    raise ValueError(\n",
      "ValueError: min_weight_fraction_leaf == 0.7, must be <= 0.5.\n",
      "\n",
      "--------------------------------------------------------------------------------\n",
      "28000 fits failed with the following error:\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\model_selection\\_validation.py\", line 686, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\tree\\_classes.py\", line 1342, in fit\n",
      "    super().fit(\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\tree\\_classes.py\", line 286, in fit\n",
      "    check_scalar(\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\utils\\validation.py\", line 1489, in check_scalar\n",
      "    raise ValueError(\n",
      "ValueError: min_weight_fraction_leaf == 0.8, must be <= 0.5.\n",
      "\n",
      "--------------------------------------------------------------------------------\n",
      "28000 fits failed with the following error:\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\model_selection\\_validation.py\", line 686, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\tree\\_classes.py\", line 1342, in fit\n",
      "    super().fit(\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\tree\\_classes.py\", line 286, in fit\n",
      "    check_scalar(\n",
      "  File \"C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\utils\\validation.py\", line 1489, in check_scalar\n",
      "    raise ValueError(\n",
      "ValueError: min_weight_fraction_leaf == 0.9, must be <= 0.5.\n",
      "\n",
      "  warnings.warn(some_fits_failed_message, FitFailedWarning)\n",
      "C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\model_selection\\_search.py:953: UserWarning: One or more of the test scores are non-finite: [-0.01572277 -0.01545214 -0.01698689 ...         nan         nan\n",
      "         nan]\n",
      "  warnings.warn(\n",
      "C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\model_selection\\_search.py:953: UserWarning: One or more of the train scores are non-finite: [-0.01393679 -0.01525954 -0.01416679 ...         nan         nan\n",
      "         nan]\n",
      "  warnings.warn(\n",
      "C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\tree\\_classes.py:306: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0'`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Mejor configuración:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>max_depth</th>\n",
       "      <th>max_features</th>\n",
       "      <th>max_leaf_nodes</th>\n",
       "      <th>min_samples_leaf</th>\n",
       "      <th>min_weight_fraction_leaf</th>\n",
       "      <th>splitter</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>auto</td>\n",
       "      <td>None</td>\n",
       "      <td>1</td>\n",
       "      <td>0.1</td>\n",
       "      <td>best</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   max_depth max_features max_leaf_nodes  min_samples_leaf  \\\n",
       "0          5         auto           None                 1   \n",
       "\n",
       "   min_weight_fraction_leaf splitter  \n",
       "0                       0.1     best  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "neg_mean_squared_error (mejor configuración) -0.004\n",
      "\n",
      "Performance para todas las configuraciones (ordernadas en forma descendiente):\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>param_splitter</th>\n",
       "      <th>param_max_depth</th>\n",
       "      <th>param_min_samples_leaf</th>\n",
       "      <th>param_min_weight_fraction_leaf</th>\n",
       "      <th>param_max_features</th>\n",
       "      <th>param_max_leaf_nodes</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>variance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>36000</th>\n",
       "      <td>best</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>0.1</td>\n",
       "      <td>auto</td>\n",
       "      <td>None</td>\n",
       "      <td>-0.004236</td>\n",
       "      <td>0.002519</td>\n",
       "      <td>0.000006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48744</th>\n",
       "      <td>best</td>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "      <td>0.1</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>-0.004236</td>\n",
       "      <td>0.002519</td>\n",
       "      <td>0.000006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14472</th>\n",
       "      <td>best</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0.1</td>\n",
       "      <td>auto</td>\n",
       "      <td>None</td>\n",
       "      <td>-0.004236</td>\n",
       "      <td>0.002519</td>\n",
       "      <td>0.000006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14454</th>\n",
       "      <td>best</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>0.1</td>\n",
       "      <td>auto</td>\n",
       "      <td>None</td>\n",
       "      <td>-0.004236</td>\n",
       "      <td>0.002519</td>\n",
       "      <td>0.000006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14436</th>\n",
       "      <td>best</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0.1</td>\n",
       "      <td>auto</td>\n",
       "      <td>None</td>\n",
       "      <td>-0.004236</td>\n",
       "      <td>0.002519</td>\n",
       "      <td>0.000006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50395</th>\n",
       "      <td>random</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>0.7</td>\n",
       "      <td>None</td>\n",
       "      <td>90</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50396</th>\n",
       "      <td>best</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>0.8</td>\n",
       "      <td>None</td>\n",
       "      <td>90</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50397</th>\n",
       "      <td>random</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>0.8</td>\n",
       "      <td>None</td>\n",
       "      <td>90</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50398</th>\n",
       "      <td>best</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>0.9</td>\n",
       "      <td>None</td>\n",
       "      <td>90</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50399</th>\n",
       "      <td>random</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>0.9</td>\n",
       "      <td>None</td>\n",
       "      <td>90</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>50400 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      param_splitter param_max_depth param_min_samples_leaf  \\\n",
       "36000           best              11                      1   \n",
       "48744           best              12                      9   \n",
       "14472           best               5                      5   \n",
       "14454           best               5                      4   \n",
       "14436           best               5                      3   \n",
       "...              ...             ...                    ...   \n",
       "50395         random              12                     10   \n",
       "50396           best              12                     10   \n",
       "50397         random              12                     10   \n",
       "50398           best              12                     10   \n",
       "50399         random              12                     10   \n",
       "\n",
       "      param_min_weight_fraction_leaf param_max_features param_max_leaf_nodes  \\\n",
       "36000                            0.1               auto                 None   \n",
       "48744                            0.1               None                 None   \n",
       "14472                            0.1               auto                 None   \n",
       "14454                            0.1               auto                 None   \n",
       "14436                            0.1               auto                 None   \n",
       "...                              ...                ...                  ...   \n",
       "50395                            0.7               None                   90   \n",
       "50396                            0.8               None                   90   \n",
       "50397                            0.8               None                   90   \n",
       "50398                            0.9               None                   90   \n",
       "50399                            0.9               None                   90   \n",
       "\n",
       "       mean_test_score  std_test_score  variance  \n",
       "36000        -0.004236        0.002519  0.000006  \n",
       "48744        -0.004236        0.002519  0.000006  \n",
       "14472        -0.004236        0.002519  0.000006  \n",
       "14454        -0.004236        0.002519  0.000006  \n",
       "14436        -0.004236        0.002519  0.000006  \n",
       "...                ...             ...       ...  \n",
       "50395              NaN             NaN       NaN  \n",
       "50396              NaN             NaN       NaN  \n",
       "50397              NaN             NaN       NaN  \n",
       "50398              NaN             NaN       NaN  \n",
       "50399              NaN             NaN       NaN  \n",
       "\n",
       "[50400 rows x 9 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Joaquin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\sklearn\\tree\\_classes.py:306: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0'`.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "evaluation_models_pred[\"BTCUSDT_DecisionTreeRegressor\"].evaluate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Serie:\n",
    "    def __init__(self, name, values):\n",
    "        self.name = name\n",
    "        self.values = values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_series(x, series):\n",
    "    for serie in series:\n",
    "        plt.plot(x, serie.values, label=serie.name)\n",
    "    plt.legend(loc='best')\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "def compare(real, predictions):\n",
    "    predictions_df = real.copy()\n",
    "    predictions_df[\"predicted_values\"] = predictions\n",
    "    real.rename(columns = {'close(t)':'real_values'}, inplace = True)\n",
    "    fig, ax = plt.subplots(figsize=(15,15))\n",
    "    predictions_df.plot(ax=ax, linewidth=1)\n",
    "    real.plot(ax=ax, linewidth=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Joaquin\\AppData\\Local\\Temp\\ipykernel_17560\\3968094705.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  real.rename(columns = {'close(t)':'real_values'}, inplace = True)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1080x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "compare(dataframes_y_test_pred[\"BTCUSDT\"], evaluation_models_pred[\"BTCUSDT_DecisionTreeRegressor\"].predict(dataframes_X_test_pred[\"BTCUSDT\"]) )"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.6 64-bit (windows store)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  },
  "vscode": {
   "interpreter": {
    "hash": "91d5fa0733a3b6ae75b1f47bdf7ad85541360fca3257db01da4aa0636bba48a8"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
